ORM(Object Relational Mapping): 
	- Maps DB tables into .NET objects and classes
	- Allows to query DB in OOP fashiion
	- Before ORM, devs used to manually execute command to map the data from DB
	- It has 3 workflows: 
		1. Database First Workflow
			- First create DB and map with class/object
		2. Code First Workflow
			- First create class/object and generate DB
		3. Model First Workflow
			- First create UML design and generate class/object and DB

- ********************** Code First Workflow ***********************

- Install following frameworks: 
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Tools

- Create DB Context
	- It's a class provided by Entity Framework and is a gateway to our DB
	- Create DB Sets
		- It represents table in DB
		- DB Context can have one or more DB Sets
		- LINQ can be use to query DB Sets and Entity-Framework translates that LINQ into SQL Query at runtime
		- It does so by automatically connecting with DB, reading DB and mapping data to the objects and closing connection
		- We don't have to manually translate the LINQ into SQL query for database

- Perform Migration
	- Migration allows to upgrade the database in-order to sync DB with the updated model in code
	- The migration files provide 'Up()' and 'Down()' method to upgrade and downgrade(undo update) the database
	- Goto Tools > NuGet Package Manage > Package Manager Console
	- Goto appsettings.json and specify connection string as 'myConStr'
	- Goto Program.cs: 
		- Declare connection string variable as 'conStr'
		- Add DB Context with Connection String to configure DB Provider
	- To create migration files, type Command: add-migration migration_name
	- To create DB with reference to code, type: update-database
	- Goto SSMS and Refresh to see the updated Database

********************************************************************************************************

- Update Database with Migration
	- Update model by adding extra fields like 'Price' for product
	- Add another migration: add-migration Product1
	Update DB: update-database

- Add ProductController.cs
- Add Product Views: 
	- Select Razor Views
	- Select View Name and Template
	- Select Model and DbContext
	- Create views for Index, Details, Create, Edit and Delete